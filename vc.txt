import socket
import subprocess
import os
import shutil
import psutil
import webbrowser
import pyautogui
import ctypes


def execute_command(command, conn):
    try:
        if command == "1":
            subprocess.run(["shutdown", "/s", "/f", "/t", "0"], check=True)
            return "Shutdown initiated."

        elif command == "2":
            subprocess.run(["shutdown", "/r", "/f", "/t", "0"], check=True)
            return "Restart initiated."

        elif command == "3":
            subprocess.run(["shutdown", "/l"], check=True)
            return "Log off initiated."

        elif command == "4":
            subprocess.run(["rundll32.exe", "powrprof.dll,SetSuspendState", "0,1,0"], check=True)
            return "System going to sleep."

        elif command == "5":
            subprocess.run(["rundll32.exe", "user32.dll,LockWorkStation"], check=True)
            return "System locked."

        elif command == "6":
            subprocess.run("nircmd.exe monitor off", check=True)
            return "Monitor turned off."

        elif command == "7":
            result = subprocess.run(["systeminfo"], capture_output=True, text=True)
            return result.stdout

        elif command == "8":
            result = subprocess.run(["wmic", "logicaldisk", "get", "size,freespace,caption"], capture_output=True, text=True)
            return result.stdout

        elif command == "9":
            result = subprocess.run(["tasklist"], capture_output=True, text=True)
            return result.stdout

        elif command == "10":
            result = subprocess.run(["ipconfig"], capture_output=True, text=True)
            return result.stdout

        elif command == "11":
            result = subprocess.run(["ping", "8.8.8.8"], capture_output=True, text=True)
            return result.stdout

        elif command == "12":
            result = subprocess.run(["speedtest-cli"], capture_output=True, text=True)
            return result.stdout

        elif command == "13":
            result = subprocess.run(["dir", "C:\\"], capture_output=True, text=True, shell=True)
            return result.stdout

        elif command == "14":
            file_path = "C:\\Users\\Public\\testfile.txt"
            with open(file_path, "w") as file:
                file.write("Test file created remotely.")
            return f"File created at {file_path}."

        elif command == "15":
            file_path = "C:\\Users\\Public\\testfile.txt"
            if os.path.exists(file_path):
                os.remove(file_path)
                return f"File {file_path} deleted."
            else:
                return f"File {file_path} does not exist."

        elif command == "16":
            src = "C:\\Users\\Public\\testfile.txt"
            dst = "C:\\Users\\Public\\testfile_copy.txt"
            if os.path.exists(src):
                shutil.copy(src, dst)
                return "File copied."
            else:
                return "Source file does not exist."

        elif command == "17":
            src = "C:\\Users\\Public\\testfile_copy.txt"
            dst = "C:\\Users\\Public\\testfile_moved.txt"
            if os.path.exists(src):
                shutil.move(src, dst)
                return "File moved."
            else:
                return "Source file does not exist."

        elif command == "18":
            folder = "C:\\Users\\Public\\testfolder"
            if os.path.exists(folder):
                shutil.rmtree(folder)
                return "Directory deleted."
            else:
                return "Directory does not exist."

        elif command == "19":
            cpu_usage = psutil.cpu_percent(interval=1)
            return f"Current CPU usage: {cpu_usage}%"

        elif command == "20":
            memory = psutil.virtual_memory()
            return f"Memory usage: {memory.percent}% used"

        elif command == "21":
            battery = psutil.sensors_battery()
            if battery:
                return f"Battery percent: {battery.percent}%"
            else:
                return "No battery found."

        elif command == "22":
            webbrowser.open("https://www.example.com")
            return "Opening website."

        elif command == "23":
            screenshot = pyautogui.screenshot()
            screenshot.save("screenshot.png")
            with open("screenshot.png", "rb") as f:
                data = f.read()
                conn.sendall(data)
            os.remove("screenshot.png")
            return None  # Already sent

        elif command == "24":
            ctypes.windll.user32.MessageBoxW(0, "This is a remote message!", "Message", 0x40 | 0x1)
            return "Message displayed."

        elif command == "25":
            result = subprocess.run(["net", "user"], capture_output=True, text=True, shell=True)
            return result.stdout

        elif command == "26":
            result = subprocess.run(["net", "start"], capture_output=True, text=True, shell=True)
            return result.stdout

        elif command == "27":
            result = subprocess.run(["netsh", "advfirewall", "show", "allprofiles"], capture_output=True, text=True, shell=True)
            return result.stdout

        elif command == "28":
            while True:
                cmd = conn.recv(4096).decode('utf-8')
                if cmd.lower() == "exit":
                    break
                output = subprocess.getoutput(cmd)
                conn.sendall(output.encode('utf-8'))
            return None

        elif command == "29":
            while True:
                cmd = conn.recv(4096).decode('utf-8')
                if cmd.lower() == "exit":
                    break
                output = subprocess.getoutput(f'powershell -Command "{cmd}"')
                conn.sendall(output.encode('utf-8'))
            return None

        else:
            return "Invalid command."

    except Exception as e:
        return f"Error: {str(e)}"


def start_server(host='0.0.0.0', port=9999):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((host, port))
        server_socket.listen(5)
        print(f"Server listening on {host}:{port}...")
        while True:
            conn, addr = server_socket.accept()
            with conn:
                print(f"Connected by {addr}")
                command = conn.recv(1024).decode('utf-8')
                result = execute_command(command, conn)
                if result is not None:
                    conn.sendall(result.encode('utf-8'))


if __name__ == "__main__":
    start_server()
